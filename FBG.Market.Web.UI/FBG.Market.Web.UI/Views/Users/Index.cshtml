@model IEnumerable<FBG.Market.Web.Identity.Models.UserRoleViewModel>

@{
    ViewBag.Title = "Users With Roles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section HeadResources{
    @Html.Partial("GridViewHeadResources")

}
@section Head {
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/GridView.css")" />
    <link href="~/Content/dx.common.css" rel="stylesheet" />
    <link href="~/Content/dx.light.css" rel="stylesheet" />
    <script type="text/javascript" src="@Url.Content("~/Content/GridView.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Content/productGridView.js")"></script>
    <script src="~/Scripts/dx.all.js"></script>

    <script type="text/javascript">
        var isResetRequired = false;
        function OnEndCallback(s, e) {

            if (s.cpMessage) {

                DevExpress.ui.notify(s.cpMessage, "success", 1000);
                delete s.cpMessage;
            }
            if (s.cpError) {

                DevExpress.ui.notify(s.cpError, "error", 1000, closeOnClick = true);
                delete s.cpError;
            }
        }
        function OnBeginCallback(s, e) {
            if (e.command == "DELETEROW") {
                var result = DevExpress.ui.dialog.confirm("<i>Are you sure?</i>", "Confirm changes");
                result.done(function (dialogResult) {
                    if (!dialogResult) {
                        e.customArgs["cancelCallback"] = true;
                    }
                });
            }
        }

        function OnSelectedVendorChanged() {
            isResetRequired = true;
            GridView.GetEditor("RoleId").PerformCallback();
        }

        function RoleComboBox_BeginCallback(s, e) {
            var ele = GridView.GetEditor("VID");
            e.customArgs["vendorID"] = ele.GetValue();
        }

        function RoleComboBox_EndCallback(s, e) {
            if (isResetRequired) {
                isResetRequired = false;
                s.SetSelectedIndex(0);
            }
        }
    </script>

    <style type="text/css">
        .customRow .dxgv {
            border-bottom: 1px Solid #d1d1d1 !important;
        }

        .custom-anchor {
            padding-left: 0px !important;
        }

        .dxeBinImgPreviewContainerSys {
            width: 200px !important;
            height: 200px !important;
        }
    </style>
    <style type="text/css">
        .dxhe-iframe-wrapper {
            height: 500px;
        }

        .customRow .dxgv {
            border-bottom: 1px Solid #d1d1d1 !important;
        }

        .custom-anchor {
            padding-left: 0px !important;
        }

        .dxeBinImgPreviewContainerSys {
            width: 200px !important;
            height: 200px !important;
        }

        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-gap: 20px;
        }

        .float-container {
            border: 3px solid #fff;
            padding: 20px;
        }

        .float-child {
            width: 50%;
            float: left;
            padding: 20px;
            border: 2px solid red;
        }

        .dx-toast-content {
            min-width: 300px;
            max-width: 400px;
        }

        .float-child.imageZoomNavigator {
            margin-right: 20px;
        }
    </style>

}

@section PageToolbar {
    @Html.DevExpress().Menu(menuSettings =>
    {
    menuSettings.Name = "pageToolbar";

    menuSettings.ItemAutoWidth = false;
    menuSettings.AllowSelectItem = false;
    menuSettings.ApplyItemStyleToTemplates = true;

    menuSettings.SettingsAdaptivity.Enabled = true;
    menuSettings.SettingsAdaptivity.EnableAutoHideRootItems = true;
    menuSettings.SettingsAdaptivity.EnableCollapseRootItemsToIcons = true;
    menuSettings.SettingsAdaptivity.CollapseRootItemsToIconsAtWindowInnerWidth = 600;

    menuSettings.Width = Unit.Percentage(100);
    menuSettings.ControlStyle.SeparatorWidth = Unit.Pixel(0);
    menuSettings.ControlStyle.CssClass = "page-toolbar";

    menuSettings.Styles.Item.CssClass = "item";
    menuSettings.Styles.Item.VerticalAlign = VerticalAlign.Middle;

    menuSettings.Images.Item.Width = Unit.Pixel(16);
    menuSettings.Images.Item.Height = Unit.Pixel(16);

    menuSettings.Items.Add(item =>
        {
            item.Enabled = false;
        item.SetTemplateContent(template => ViewContext.Writer.Write("<h1>Users</h1>"));
    });
    menuSettings.Items.Add(item =>
        {
        item.Name = "ToggleFilterPanel";
        item.Text = "";
        item.GroupName = "Filter";
        item.Alignment = MenuItemAlignment.Right;
        item.AdaptivePriority = 1;
        item.Image.Url = "~/Content/Images/search.svg";
        item.Image.UrlChecked = "~/Content/Images/search-selected.svg";
    });
    menuSettings.ClientSideEvents.ItemClick = "onPageToolbarItemClick";
}).GetHtml()

    @Html.DevExpress().Panel(panelSettings =>
    {
        panelSettings.Name = "filterPanel";
    panelSettings.Collapsible = true;
    panelSettings.ControlStyle.CssClass = "filter-panel";

    panelSettings.SettingsCollapsing.ExpandEffect = PanelExpandEffect.Slide;
    panelSettings.SettingsCollapsing.AnimationType = AnimationType.None;
    panelSettings.SettingsCollapsing.ExpandButton.Visible = false;

    panelSettings.SetContent(() =>
        {
            Html.DevExpress().ButtonEdit(buttonEditSettings =>
            {
            buttonEditSettings.Name = "searchButtonEdit";
            buttonEditSettings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
            buttonEditSettings.Properties.Caption = "Search";
            buttonEditSettings.Width = Unit.Percentage(100);
        }).GetHtml();
    });

    panelSettings.ClientSideEvents.Expanded = "onFilterPanelExpanded";
    panelSettings.ClientSideEvents.Collapsed = "adjustPageControls";
}).GetHtml()
}

@section LeftPanelContent {
    @Html.Partial("~/Views/Shared/LeftPanelPartial.cshtml")
}


@section RightPanelContent {
    <div class="settings-content">
        <h2>Settings</h2>
        <p>Place your content here</p>
    </div>
}
<style>
    body, html {
        padding: 0;
        margin: 0;
    }
</style>

<script>
    /*function OnInit(s, e) {
        AdjustSize();
        ASPxClientUtils.AttachEventToElement(window, "resize", function (evt) {
            AdjustSize();
        });
    }
    function OnEndCallback(s, e) {
        AdjustSize();
    }
    function AdjustSize() {
        var height = document.documentElement.clientHeight;
        grid.SetHeight(height);
    }*/
</script>
@using (Html.BeginForm())
{
    @Html.Action("GridViewNewPartial", "Users")
}


